---
- name: TLS | Acme | Check if domain names set properly
  fail:
    msg: "Variable acme_domains with domain names list should be set"
  when: tls.acme_domains | length == 0

- name: TLS | Pre-installation | Install prerequisites
  become: yes
  become_user: root
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - git
    - curl
    - socat

- name: TLS | Installation | Ensure acme.sh repo destination dir
  become: yes
  become_user: root
  set_fact:
    acme_checkout_dir: /root/acme.sh
    acme_dir: "{{ '/root/.acme.sh.' + tls.acme_domains[0] if tls.acme_challenge == 'dns' else '/root/.acme.sh' }}"

- name: TLS | Installation | Checkout acme.sh repo
  become: yes
  become_user: root
  git:
    repo: https://github.com/acmesh-official/acme.sh.git
    dest: "{{ acme_checkout_dir }}"

- name: TLS | Installation | Install acme.sh to the system
  become: yes
  become_user: root
  command: "./acme.sh --install --home {{ acme_dir }} --config-home {{ acme_dir }} --cert-home {{ acme_dir }} --nocron --noprofile"
  args:
    chdir: "{{ acme_checkout_dir }}"
    creates: "{{ acme_dir }}/acme.sh"

# In case there already was some installation of acme.sh
- name: TLS | Installation | Check for autogenerated crontab entry
  become: yes
  become_user: root
  shell:
    cmd: |
      crontab -l | egrep -q '.*acme.sh.*dev/null.*'
  changed_when: false
  failed_when: false
  register: crontab_default_acme_entry

- name: TLS | Instalation | Delete autogenerated crontab entry
  become: yes
  become_user: root
  shell:
    cmd: |
      crontab -l | sed '/.*acme.sh.*\/dev\/null.*/d' | crontab -
  when: crontab_default_acme_entry.rc == 0

# As we set random time for domains, check for them to not add a row
# for the same domain second time
- name: TLS | Installation | Check for previously generated crontab entry
  become: yes
  become_user: root
  shell:
    cmd: |
      crontab -l | egrep -q '.*{{ acme_dir }}.*'
  changed_when: false
  failed_when: false
  register: crontab_previous_acme_entry

- name: TLS | Installation | Add new entry to existing crontab entries
  become: yes
  become_user: root
  shell:
    cmd: |
      (crontab -l ; echo '{{ 60 | random }} {{ 5 | random }} * * * {{ acme_dir }}/acme.sh --cron --home {{ acme_dir }} --config-home {{ acme_dir }}') | crontab -
  when: crontab_previous_acme_entry.rc != 0

- name: TLS | Installation | Convert domains list to appropriate format
  set_fact:
    # To understand this, look at https://medium.com/@george.shuklin/data-manipulation-in-ansible-bab8eb7d7f93
    acme_domains: '{{ tls.acme_domains | map("regex_replace", "^(.*)$", " -d \1") | list | join(" ") | safe }}'

- name: TLS | Installation | Show resulting domains line
  debug:
    msg: "{{ acme_domains }}"

- name: TLS | Installation | Create directory for certificates
  become: yes
  become_user: root
  file:
    path: "{{ tls.target_dir }}/{{ tls.acme_domains[0] }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: TLS | Installation | Create hooks string
  set_fact:
    acme_hooks: '--pre-hook "{{ tls.acme_pre_hook }}" --post-hook "{{ tls.acme_post_hook }}"'
  when: tls.acme_hooks

- name: TLS | Certificate Issue | Create new certs in standalone mode
  become: yes
  become_user: root
  shell:
    cmd: |
      ./acme.sh --issue --{{ tls.acme_challenge }} {{ acme_domains }} \
      --key-file /etc/ssl_certs/{{ tls.acme_domains[0] }}/private.pem \
      --fullchain-file /etc/ssl_certs/{{ tls.acme_domains[0] }}/fullchain.pem \
      --home {{ acme_dir }} --config-home {{ acme_dir }} \
      {{ acme_hooks }}
  args:
    chdir: "{{ acme_dir }}"
  when: tls.acme_challenge == "standalone"
  register: ch_ex
  changed_when: ch_ex.rc != 2
  failed_when: False

- name: TLS | Certificate Issue | Create new certs in DNS mode
  become: yes
  become_user: root
  shell:
    cmd: |
      ./acme.sh --issue --dns {{ tls.acme_ch_dns_type }} {{ acme_domains }} \
      --key-file /etc/ssl_certs/{{ tls.acme_domains[0] }}/private.pem \
      --fullchain-file /etc/ssl_certs/{{ tls.acme_domains[0] }}/fullchain.pem \
      --home {{ acme_dir }} --config-home {{ acme_dir }} \
      --post-hook "{{ tls.acme_post_hook }}"
  args:
    chdir: "{{ acme_dir }}"
  environment: "{{ tls.acme_ch_dns_vars }}"
  when: tls.acme_challenge == "dns"
  register: ch_ex
  changed_when: "'Domains not changed' not in ch_ex.stdout"
  failed_when: False

- name: TLS | Postinstall | Ensure prehook for cron
  become: yes
  become_user: root
  lineinfile:
    path: "{{ acme_dir }}/{{ tls.acme_domains[0] }}/{{ tls.acme_domains[0] }}.conf"
    regexp: '^Le_PreHook='
    line: 'Le_PreHook="{{ tls.acme_pre_hook }}"'
  when: tls.acme_hooks

- name: TLS | Postinstall | Ensure posthook for cron
  become: yes
  become_user: root
  lineinfile:
    path: "{{ acme_dir }}/{{ tls.acme_domains[0] }}/{{ tls.acme_domains[0] }}.conf"
    regexp: '^Le_PostHook='
    line: 'Le_PostHook="{{ tls.acme_post_hook }}"'
  when: tls.acme_hooks

- name: TLS | Postcheck | Ensure certs placement
  stat:
    path: /etc/ssl_certs/{{ tls.acme_domains[0] }}/private.pem
  register: private_key

- name: TLS | Postcheck | Forcibly place keypair to target dir
  become: yes
  become_user: root
  copy:
    src: '{{ item["src"] }}'
    remote_src: yes
    dest: '{{ item["dest"] }}'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  with_items:
    - { src: "{{ acme_dir }}/{{ tls.acme_domains[0] }}/{{ tls.acme_domains[0] }}.key",
        dest: "{{ tls.target_dir }}/{{ tls.acme_domains[0] }}/private.pem" }
    - { src: "{{ acme_dir }}/{{ tls.acme_domains[0] }}/fullchain.cer",
        dest: "{{ tls.target_dir }}/{{ tls.acme_domains[0] }}/fullchain.pem" }
  when: not private_key.stat.exists

- name: TLS | Deploy | Create HAProxy chain
  become: yes
  become_user: root
  shell:
    cmd: |
      cat \
      {{ acme_dir }}/{{ tls.acme_domains[0] }}/fullchain.cer \
      {{ acme_dir }}/{{ tls.acme_domains[0] }}/{{ tls.acme_domains[0] }}.key \
      > {{ tls.target_dir }}/{{ tls.acme_domains[0] }}/{{ tls.target_bundle_name }}
  when: tls.target_format == 'haproxy' and tls.type == 'local'

- name: TLS | Deploy | Create HAProxy chain
  become: yes
  become_user: root
  shell:
    cmd: |
      ./acme.sh --deploy {{ acme_domains }} \
      --deploy-hook haproxy
  args:
    chdir: "{{ acme_dir }}"
  environment:
    DEPLOY_HAPROXY_PEM_PATH: "{{ tls.target_dir }}/{{ tls.acme_domains[0] }}"
    DEPLOY_HAPROXY_RELOAD: "systemctl reload haproxy"
  when: tls.target_format == 'haproxy' and tls.type == 'acme'

- name: TLS | Postcheck | Fail if got real error on cert issuing time
  fail:
    msg: "Got an error while issue certificate: \n {{ ch_ex.stdout }}"
  when: ch_ex is defined and ch_ex.rc is defined and ch_ex.rc != 0 and not 'Domains not changed' in ch_ex.stdout
